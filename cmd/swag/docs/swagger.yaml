basePath: /v1/2025
definitions:
  database.SearchPropertiesParams:
    properties:
      from_price:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      to_price:
        type: string
    type: object
  requestDTO.LoginRequestModel:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requestDTO.PropertyCreateRequest:
    properties:
      amenities:
        type: string
      description:
        type: string
      location:
        type: string
      name:
        type: string
      price:
        type: string
    required:
    - amenities
    - location
    - name
    - price
    type: object
  requestDTO.PropertyUpdateRequest:
    properties:
      amenities:
        type: string
      description:
        type: string
      location:
        type: string
      name:
        type: string
      owner_id:
        type: string
      price:
        type: string
    required:
    - amenities
    - location
    - name
    - price
    type: object
  requestDTO.RegisterRequestModel:
    properties:
      code:
        type: string
      email:
        type: string
    type: object
  requestDTO.RoomCreateModel:
    properties:
      is_available:
        type: boolean
      max_guests:
        type: integer
      name:
        type: string
      price:
        type: string
      property_id:
        type: string
    type: object
  requestDTO.RoomUpdateModel:
    properties:
      is_available:
        type: boolean
      max_guests:
        type: integer
      name:
        type: string
      price:
        type: string
      property_id:
        type: string
    type: object
  requestDTO.UserCreateRequestModel:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/requestDTO.UserRole'
      token:
        type: string
    type: object
  requestDTO.UserRole:
    enum:
    - CUSTOMER
    - HOST
    type: string
    x-enum-varnames:
    - CUSTOMER
    - HOST
  requestDTO.VerifyRequest:
    properties:
      verify_code:
        type: string
      verify_key:
        type: string
    type: object
  response.ResponseData:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8081
info:
  contact:
    email: tulehd03@gmail.com
    name: Tú Lê
    url: http://github.com/tule75/Booking-Go
  description: This is a sample server celler server.
  license:
    name: Booking Go v1.0
    url: http://github.com/tule75/Booking-Go
  termsOfService: http://github.com/tule75/Booking-Go
  title: Booking Go
  version: "1.0"
paths:
  /properties:
    post:
      consumes:
      - application/json
      description: Create a new property
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.PropertyCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Create a new property
      tags:
      - properties management
  /properties/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Properties by its unique ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Delete Properties
      tags:
      - properties management
    get:
      consumes:
      - application/json
      description: GetPropertiesByID
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: GetPropertiesByID
      tags:
      - properties management
    put:
      consumes:
      - application/json
      description: Search Properties with filter
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: param
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.PropertyUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Search Properties
      tags:
      - properties management
  /properties/filter:
    post:
      consumes:
      - application/json
      description: Search Properties with filter
      parameters:
      - description: param
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/database.SearchPropertiesParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Search Properties
      tags:
      - properties management
  /properties/owner/{id}:
    get:
      consumes:
      - application/json
      description: GetPropertiesByOwnerID
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Limit the number of rooms affected (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Offset for starting position (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: GetPropertiesByOwnerID
      tags:
      - properties management
  /rooms:
    post:
      consumes:
      - application/json
      description: Create Room
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.RoomCreateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Create Room
      tags:
      - Room management
  /rooms/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a room from the system using its unique ID.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Room deleted successfully
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Delete a room by ID
      tags:
      - Room management
    get:
      consumes:
      - application/json
      description: Get a room from the system using its unique ID.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get a room by ID
      tags:
      - Room management
    put:
      consumes:
      - application/json
      description: Update rooms from the system using its unique ID.
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: string
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.RoomUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Update room by ID
      tags:
      - Room management
  /rooms/property/{id}:
    get:
      consumes:
      - application/json
      description: Get rooms from the system using property unique ID.
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Limit the number of rooms affected (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Offset for starting position (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get rooms by property ID
      tags:
      - Room management
  /users/create-password:
    post:
      consumes:
      - application/json
      description: Verify OTP
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.UserCreateRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Verify OTP
      tags:
      - Account management
  /users/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.LoginRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Login
      tags:
      - Account management
  /users/register:
    post:
      consumes:
      - application/json
      description: Register to get OTP
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.RegisterRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Register to get OTP
      tags:
      - Account management
  /users/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requestDTO.VerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Verify OTP
      tags:
      - Account management
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
