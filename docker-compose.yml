# 2025

networks:
  pre-go-local-networks:
    driver: bridge

services:
  kafka:
    image: 'bitnami/kafka:3.5'
    container_name: kafka_container
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9094,CONTROLLER://:9095,EXTERNAL://:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: EXTERNAL://127.0.0.1:9092,PLAINTEXT://kafka_container:9094
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka_container:9095
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_HEAP_OPTS: -Xmx512M -Xms256M
      KAFKA_KRAFT_CLUSTER_ID: T-oIRJTzR1eCXo2k7m8EiQ
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 1
    ports:
      - "9094:9094"
      - "9092:9092"
    volumes:
      - ./kafka/broker1:/bitnami/kafka:rw


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui_container
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka_container:9094
    ports:
      - "9090:8080"
    depends_on:
      - kafka


  mysql:
    image: mysql
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: cmmtpnx1
      MYSQL_DATABASE: bookinggo
      MYSQL_PASSWORD: cmmtpnx1
    ports:
      - "3307:3306"
    volumes:
      - ./data/mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d/
    command: [
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
    ]
    networks:
      - pre-go-local-networks

  # Using redis cloud
  # redis:
  #   image: redis/redis-stack:latest
  #   container_name: redis_container_bloom
  #   ports:
  #     - "6331:6379"
  #   volumes:
  #     - ./data/redis_data:/data
  #   networks:
  #     - pre-go-local-networks    

  # go_ecommerce:
  #   container_name: go_ecommerce_backend_api
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: always
  #   depends_on:
  #     - mysql
  #     - kafka
  #   ports:
  #     - "8082:8081"
  #   networks:
  #     - pre-go-local-networks

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: pre-event-prometheus
  #   restart: unless-stopped
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./data/prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   extra_hosts:
  #     - host.docker.internal:host-gateway
  #   ports:
  #     - "9092:9090"
  #   networks:
  #     - pre-go-local-networks

  # grafana:
  #   image: grafana/grafana
  #   container_name: pre-event-grafana
  #   hostname: grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SING_UP=false
  #     - GF_SERVER_DOMAIN=localhost
  #     #enable logger
  #     - GF_LOG_MODE=console file
  #     - GF_LOG_FILTERS=alerting.notifier.slack:debug alermanager:debug ngalert:debug

  #   volumes:
  #     - ./grafana-storage:/var/lib/grafana
  #   ports:
  #     - "3002:3000"
  #   networks:
  #     - pre-go-local-networks    
