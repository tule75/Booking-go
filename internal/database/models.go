// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type BookingsStatus string

const (
	BookingsStatusPending   BookingsStatus = "pending"
	BookingsStatusConfirmed BookingsStatus = "confirmed"
	BookingsStatusCancelled BookingsStatus = "cancelled"
	BookingsStatusCompleted BookingsStatus = "completed"
)

func (e *BookingsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingsStatus(s)
	case string:
		*e = BookingsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingsStatus: %T", src)
	}
	return nil
}

type NullBookingsStatus struct {
	BookingsStatus BookingsStatus
	Valid          bool // Valid is true if BookingsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingsStatus), nil
}

type PaymentsPaymentMethod string

const (
	PaymentsPaymentMethodCreditCard PaymentsPaymentMethod = "credit_card"
	PaymentsPaymentMethodPaypal     PaymentsPaymentMethod = "paypal"
	PaymentsPaymentMethodVnpay      PaymentsPaymentMethod = "vnpay"
	PaymentsPaymentMethodMomo       PaymentsPaymentMethod = "momo"
	PaymentsPaymentMethodStripe     PaymentsPaymentMethod = "stripe"
)

func (e *PaymentsPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentsPaymentMethod(s)
	case string:
		*e = PaymentsPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentsPaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentsPaymentMethod struct {
	PaymentsPaymentMethod PaymentsPaymentMethod
	Valid                 bool // Valid is true if PaymentsPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentsPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentsPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentsPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentsPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentsPaymentMethod), nil
}

type PaymentsStatus string

const (
	PaymentsStatusPending  PaymentsStatus = "pending"
	PaymentsStatusPaid     PaymentsStatus = "paid"
	PaymentsStatusFailed   PaymentsStatus = "failed"
	PaymentsStatusRefunded PaymentsStatus = "refunded"
)

func (e *PaymentsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentsStatus(s)
	case string:
		*e = PaymentsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentsStatus: %T", src)
	}
	return nil
}

type NullPaymentsStatus struct {
	PaymentsStatus PaymentsStatus
	Valid          bool // Valid is true if PaymentsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentsStatus), nil
}

type UsersRole string

const (
	UsersRoleCustomer UsersRole = "customer"
	UsersRoleHost     UsersRole = "host"
	UsersRoleAdmin    UsersRole = "admin"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole
	Valid     bool // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type Availability struct {
	ID          string
	RoomID      string
	Date        time.Time
	IsAvailable sql.NullBool
	DeletedAt   sql.NullTime
}

type Booking struct {
	ID         string
	UserID     string
	PropertyID string
	RoomID     sql.NullString
	CheckIn    time.Time
	CheckOut   time.Time
	Guests     int32
	Status     NullBookingsStatus
	TotalPrice string
	CreatedAt  sql.NullTime
	DeletedAt  sql.NullTime
}

type Notification struct {
	ID        string
	UserID    string
	Message   string
	IsRead    sql.NullBool
	CreatedAt sql.NullTime
	DeletedAt sql.NullTime
}

type Payment struct {
	ID                    string
	BookingID             string
	UserID                string
	Amount                string
	PaymentMethod         NullPaymentsPaymentMethod
	Status                NullPaymentsStatus
	StripePaymentIntentID sql.NullString
	StripeChargeID        sql.NullString
	StripeCustomerID      sql.NullString
	StripeRefundID        sql.NullString
	CreatedAt             sql.NullTime
	DeletedAt             sql.NullTime
}

type Property struct {
	ID          string
	OwnerID     string
	Name        string
	Description sql.NullString
	Location    string
	Price       string
	Amenities   json.RawMessage
	Rating      sql.NullString
	CreatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}

type Review struct {
	ID         string
	UserID     string
	PropertyID string
	Rating     sql.NullInt32
	Comment    sql.NullString
	CreatedAt  sql.NullTime
	DeletedAt  sql.NullTime
}

type Room struct {
	ID          string
	PropertyID  string
	Name        sql.NullString
	Price       string
	MaxGuests   int32
	IsAvailable sql.NullBool
	CreatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}

type User struct {
	ID        string
	FullName  string
	Email     string
	Password  string
	Phone     sql.NullString
	Role      NullUsersRole
	CreatedAt sql.NullTime
	DeletedAt sql.NullTime
}

type UserCard struct {
	ID               string
	UserID           string
	StripeCustomerID string
	StripeCardID     string
	Last4            string
	Brand            string
	ExpMonth         int32
	ExpYear          int32
	CreatedAt        sql.NullTime
	DeletedAt        sql.NullTime
}
