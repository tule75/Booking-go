// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type BookingsStatus string

const (
	BookingsStatusPending   BookingsStatus = "pending"
	BookingsStatusConfirmed BookingsStatus = "confirmed"
	BookingsStatusCancelled BookingsStatus = "cancelled"
	BookingsStatusCompleted BookingsStatus = "completed"
)

func (e *BookingsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingsStatus(s)
	case string:
		*e = BookingsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingsStatus: %T", src)
	}
	return nil
}

type NullBookingsStatus struct {
	BookingsStatus BookingsStatus `json:"bookings_status"`
	Valid          bool           `json:"valid"` // Valid is true if BookingsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingsStatus), nil
}

type PaymentsPaymentMethod string

const (
	PaymentsPaymentMethodCreditCard PaymentsPaymentMethod = "credit_card"
	PaymentsPaymentMethodPaypal     PaymentsPaymentMethod = "paypal"
	PaymentsPaymentMethodVnpay      PaymentsPaymentMethod = "vnpay"
	PaymentsPaymentMethodMomo       PaymentsPaymentMethod = "momo"
	PaymentsPaymentMethodStripe     PaymentsPaymentMethod = "stripe"
)

func (e *PaymentsPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentsPaymentMethod(s)
	case string:
		*e = PaymentsPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentsPaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentsPaymentMethod struct {
	PaymentsPaymentMethod PaymentsPaymentMethod `json:"payments_payment_method"`
	Valid                 bool                  `json:"valid"` // Valid is true if PaymentsPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentsPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentsPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentsPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentsPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentsPaymentMethod), nil
}

type PaymentsStatus string

const (
	PaymentsStatusPending  PaymentsStatus = "pending"
	PaymentsStatusPaid     PaymentsStatus = "paid"
	PaymentsStatusFailed   PaymentsStatus = "failed"
	PaymentsStatusRefunded PaymentsStatus = "refunded"
)

func (e *PaymentsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentsStatus(s)
	case string:
		*e = PaymentsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentsStatus: %T", src)
	}
	return nil
}

type NullPaymentsStatus struct {
	PaymentsStatus PaymentsStatus `json:"payments_status"`
	Valid          bool           `json:"valid"` // Valid is true if PaymentsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentsStatus), nil
}

type UsersRole string

const (
	UsersRoleCUSTOMER UsersRole = "CUSTOMER"
	UsersRoleHOST     UsersRole = "HOST"
	UsersRoleADMIN    UsersRole = "ADMIN"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole `json:"users_role"`
	Valid     bool      `json:"valid"` // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type Availability struct {
	ID          string       `json:"id"`
	RoomID      string       `json:"room_id"`
	Date        time.Time    `json:"date"`
	IsAvailable sql.NullBool `json:"is_available"`
	DeletedAt   sql.NullTime `json:"deleted_at"`
}

type Booking struct {
	ID         string             `json:"id"`
	UserID     string             `json:"user_id"`
	PropertyID string             `json:"property_id"`
	RoomID     sql.NullString     `json:"room_id"`
	CheckIn    time.Time          `json:"check_in"`
	CheckOut   time.Time          `json:"check_out"`
	Guests     int32              `json:"guests"`
	Status     NullBookingsStatus `json:"status"`
	TotalPrice string             `json:"total_price"`
	CreatedAt  sql.NullTime       `json:"created_at"`
	DeletedAt  sql.NullTime       `json:"deleted_at"`
}

type Notification struct {
	ID        string       `json:"id"`
	UserID    string       `json:"user_id"`
	Message   string       `json:"message"`
	IsRead    sql.NullBool `json:"is_read"`
	CreatedAt sql.NullTime `json:"created_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

type Payment struct {
	ID                    string                    `json:"id"`
	BookingID             string                    `json:"booking_id"`
	UserID                string                    `json:"user_id"`
	Amount                string                    `json:"amount"`
	PaymentMethod         NullPaymentsPaymentMethod `json:"payment_method"`
	Status                NullPaymentsStatus        `json:"status"`
	StripePaymentIntentID sql.NullString            `json:"stripe_payment_intent_id"`
	StripeChargeID        sql.NullString            `json:"stripe_charge_id"`
	StripeCustomerID      sql.NullString            `json:"stripe_customer_id"`
	StripeRefundID        sql.NullString            `json:"stripe_refund_id"`
	CreatedAt             sql.NullTime              `json:"created_at"`
	DeletedAt             sql.NullTime              `json:"deleted_at"`
}

type Property struct {
	ID          string          `json:"id"`
	OwnerID     string          `json:"owner_id"`
	Name        string          `json:"name"`
	Description sql.NullString  `json:"description"`
	Location    string          `json:"location"`
	Price       string          `json:"price"`
	Amenities   json.RawMessage `json:"amenities"`
	Rating      sql.NullString  `json:"rating"`
	CreatedAt   sql.NullTime    `json:"created_at"`
	DeletedAt   sql.NullTime    `json:"deleted_at"`
}

type Review struct {
	ID         string         `json:"id"`
	UserID     string         `json:"user_id"`
	PropertyID string         `json:"property_id"`
	Rating     sql.NullInt32  `json:"rating"`
	Comment    sql.NullString `json:"comment"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	DeletedAt  sql.NullTime   `json:"deleted_at"`
}

type Room struct {
	ID          string         `json:"id"`
	PropertyID  string         `json:"property_id"`
	Name        sql.NullString `json:"name"`
	Price       string         `json:"price"`
	MaxGuests   int32          `json:"max_guests"`
	IsAvailable sql.NullBool   `json:"is_available"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	DeletedAt   sql.NullTime   `json:"deleted_at"`
}

type User struct {
	ID        string         `json:"id"`
	FullName  string         `json:"full_name"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	Phone     sql.NullString `json:"phone"`
	Role      NullUsersRole  `json:"role"`
	CreatedAt sql.NullTime   `json:"created_at"`
	DeletedAt sql.NullTime   `json:"deleted_at"`
	Salt      string         `json:"salt"`
}

type UserCard struct {
	ID               string       `json:"id"`
	UserID           string       `json:"user_id"`
	StripeCustomerID string       `json:"stripe_customer_id"`
	StripeCardID     string       `json:"stripe_card_id"`
	Last4            string       `json:"last4"`
	Brand            string       `json:"brand"`
	ExpMonth         int32        `json:"exp_month"`
	ExpYear          int32        `json:"exp_year"`
	CreatedAt        sql.NullTime `json:"created_at"`
	DeletedAt        sql.NullTime `json:"deleted_at"`
}
